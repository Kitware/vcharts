{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src/index.js",
    "templates/bullet.json",
    "templates/vega.json",
    "templates/xy.json"
  ],
  "names": [],
  "mappingsrl
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "var templates = {\n        'bullet': require('../templates/bullet.json'),\n        'vega': require('../templates/vega.json'),\n        'xy': require('../templates/xy.json')\n    };\n\nfunction getNested(spec, parts) {\n    if (spec === undefined || parts.length === 0) {\n        return spec;\n    }\n    return getNested(spec[parts[0]], parts.slice(1));\n}\n\nfunction setNested(spec, parts, value) {\n    if (parts.length === 1) {\n        spec[parts[0]] = value;\n        return;\n    }\n    if (spec[parts[0]] === undefined) {\n        spec[parts[0]] = {};\n    }\n    return setNested(spec[parts[0]], parts.slice(1));\n}\n\nfunction transform(spec, options) {\n    var transformed,\n        index,\n        templateSpec,\n        elements,\n        element,\n        elementIndex,\n        itemIndex,\n        arg1, arg2, key;\n\n    if (Array.isArray(spec)) {\n        transformed = [];\n        for (index = 0; index < spec.length; index += 1) {\n            transformed.push(transform(spec[index], options));\n        }\n        return transformed;\n    }\n    if (spec === null) {\n        return spec;\n    }\n    if (typeof spec === 'object') {\n        if (spec['{{'] !== undefined) {\n            templateSpec = spec['{{'];\n            if (typeof templateSpec === 'string') {\n                templateSpec = [templateSpec];\n            }\n            if (templateSpec.length < 2) {\n                templateSpec = [templateSpec[0], null];\n            }\n            transformed = getNested(options, templateSpec[0].split('.'));\n            if (transformed === undefined) {\n                transformed = templateSpec[1];\n                setNested(options, templateSpec[0].split('.'), templateSpec[1]);\n            }\n            return transformed;\n        }\n        if (spec['[['] !== undefined) {\n            templateSpec = spec['[['];\n            transformed = [];\n            elements = transform(templateSpec[0], options);\n            for (elementIndex = 0; elementIndex < elements.length; elementIndex += 1) {\n                options[templateSpec[1]] = elements[elementIndex];\n                for (itemIndex = 2; itemIndex < templateSpec.length; itemIndex += 1) {\n                    element = transform(templateSpec[itemIndex], options);\n                    if (element !== null) {\n                        transformed.push(element);\n                    }\n                }\n            }\n            return transformed;\n        }\n        if (spec['??'] !== undefined) {\n            templateSpec = spec['??'];\n            condition = transform(templateSpec[0], options);\n            if (condition) {\n                return transform(templateSpec[1], options);\n            }\n            return transform(templateSpec[2], options);\n        }\n        if (spec['=='] !== undefined) {\n            templateSpec = spec['=='];\n            arg1 = transform(templateSpec[0], options);\n            arg2 = transform(templateSpec[1], options);\n            return (arg1 === arg2);\n        }\n        transformed = {};\n        for (key in spec) {\n            if (spec.hasOwnProperty(key)) {\n                transformed[key] = transform(spec[key], options);\n            }\n        }\n        return transformed;\n    }\n    return spec;\n}\n\nfunction isObjectLiteral(object) {\n    return object && object.constructor && object.constructor.name === 'Object';\n}\n\nfunction isArrayLiteral(object) {\n    return object && object.constructor && object.constructor.name === 'Array';\n}\n\nfunction extend(defaults, options) {\n    var extended,\n        prop,\n        index;\n    if (options === undefined) {\n        return defaults;\n    }\n    if (isObjectLiteral(defaults)) {\n        extended = {};\n        for (prop in defaults) {\n            if (Object.prototype.hasOwnProperty.call(defaults, prop)) {\n                extended[prop] = extend(defaults[prop], options[prop]);\n            }\n        }\n        for (prop in options) {\n            if (!Object.prototype.hasOwnProperty.call(defaults, prop)) {\n                extended[prop] = options[prop];\n            }\n        }\n        return extended;\n    }\n    if (isArrayLiteral(defaults)) {\n        extended = [];\n        for (index = 0; index < defaults.length; index += 1) {\n            extended.push(extend(defaults[index], options[index]));\n        }\n        if (isArrayLiteral(options)) {\n            for (index = defaults.length; index < options.length; index += 1) {\n                extended.push(options[index]);\n            }\n        }\n        return extended;\n    }\n    return options;\n}\n\nfunction deepClone(obj) {\n    var el = obj.el, copy;\n    delete obj.el;\n    copy = JSON.parse(JSON.stringify(obj));\n    obj.el = el;\n    copy.el = el;\n    return copy;\n}\n\nfunction chart(type, initialOptions) {\n    var that = this;\n\n    that.options = {};\n    that.specTemplate = templates[type];\n\n    that.update = function (newOptions) {\n        var vegaOptions, spec, sizeOptions, curOptions, el;\n\n        that.options = extend(that.options, newOptions);\n\n        // Transform pass 1 to get the padding\n        spec = transform(that.specTemplate, deepClone(that.options));\n\n        // Use padding and element size to set size, unless\n        // size explicitly specified or element size is zero.\n        el = d3.select(that.options.el)[0][0];\n        sizeOptions = {};\n        if (el.offsetWidth !== 0 && el.offsetHeight !== 0) {\n            if (that.options.width === undefined) {\n                sizeOptions.width = el.offsetWidth;\n                if (spec.padding) {\n                    sizeOptions.width -= spec.padding.left + spec.padding.right;\n                }\n            }\n            if (that.options.height === undefined) {\n                sizeOptions.height = el.offsetHeight;\n                if (spec.padding) {\n                    sizeOptions.height -= spec.padding.top + spec.padding.bottom;\n                }\n            }\n        }\n        curOptions = extend(that.options, sizeOptions);\n\n        // Options that go directly to Vega runtime\n        vegaOptions = {\n            el: curOptions.el,\n            renderer: curOptions.renderer\n        };\n\n        // Transform pass 2 to get the final visualization\n        spec = transform(that.specTemplate, curOptions);\n        console.log(spec);\n\n        vg.parse.spec(spec, function (chartObj) {\n            var chart = chartObj(vegaOptions);\n            chart.update();\n        });\n    };\n\n    that.update(initialOptions);\n\n    return that;\n}\n\nmodule.exports = {\n    transform: transform,\n    chart: chart,\n    templates: templates\n};\n",
    "module.exports={\n    \"width\": {\"{{\": [\"width\", 300]},\n    \"height\": {\"{{\": [\"height\", 40]},\n    \"padding\": {\n        \"top\": 10,\n        \"left\": {\n            \"??\": [\n                {\"{{\": [\"title\", \"\"]},\n                150,\n                10\n            ]\n        },\n        \"bottom\": 30,\n        \"right\": 10},\n    \"data\": [\n        {\n            \"name\": \"ranges\",\n            \"values\": {\n                \"{{\": [\n                    \"ranges\",\n                    [\n                        {\"min\": 0, \"max\": 0.1, \"background\": \"hsl(0,0%,90%)\", \"foreground\": \"rgb(102,191,103)\"},\n                        {\"min\": 0.1, \"max\": 0.5, \"background\": \"hsl(0,0%,75%)\", \"foreground\": \"rgb(255,179,24)\"},\n                        {\"min\": 0.5, \"max\": 1, \"background\": \"hsl(0,0%,60%)\", \"foreground\": \"rgb(228,0,0)\"}\n                    ]\n                ]\n            }\n        },\n        {\n            \"name\": \"values\",\n            \"values\": [\n                {\"value\": {\"{{\": [\"value\", 0]}}\n            ],\n            \"transform\": [\n                {\n                    \"type\": \"formula\",\n                    \"field\": \"align\",\n                    \"expr\": \"if(datum.value < 0, 'left', 'right')\"\n                },\n                {\n                    \"type\": \"formula\",\n                    \"field\": \"dx\",\n                    \"expr\": \"if(datum.value < 0, 5, -5)\"\n                }\n            ]\n        },\n        {\n            \"name\": \"markers\",\n            \"values\": {\"{{\": [\"markers\", []]}\n        }\n    ],\n    \"scales\": [\n        {\n            \"name\": \"x\",\n            \"type\": \"linear\",\n            \"range\": \"width\",\n            \"domain\": {\"data\": \"ranges\", \"field\": [\"min\", \"max\"]}\n        },\n        {\n            \"name\": \"y\",\n            \"type\": \"linear\",\n            \"range\": [0, {\"{{\": \"height\"}],\n            \"domain\": [0, 1]\n        },\n        {\n            \"name\": \"color\",\n            \"type\": \"linear\",\n            \"range\": {\n                \"[[\": [\n                    {\"{{\": \"ranges\"},\n                    \"range\",\n                    {\"{{\": [\"range.foreground\", \"black\"]},\n                    {\"{{\": \"range.foreground\"}\n                ]\n            },\n            \"domain\": {\n                \"[[\": [\n                    {\"{{\": \"ranges\"},\n                    \"range\",\n                    {\"{{\": \"range.min\"},\n                    {\"{{\": \"range.max\"}\n                ]\n            }\n        }\n    ],\n    \"axes\": [\n        {\n            \"type\": \"x\",\n            \"scale\": \"x\",\n            \"ticks\": 5,\n            \"properties\": {\n                \"axis\": {\n                    \"stroke\": {\"value\": \"hsl(0,0%,75%)\"},\n                    \"strokeWidth\": {\"value\": 0.5}\n                },\n                \"ticks\": {\n                    \"stroke\": {\"value\": \"hsl(0,0%,75%)\"},\n                    \"strokeWidth\": {\"value\": 0.5}\n                },\n                \"labels\": {\n                    \"fontSize\": {\"value\": {\"{{\": [\"axisFontSize\", 14]}}\n                }\n            }\n        }\n    ],\n    \"marks\": [\n        {\n            \"type\": \"rect\",\n            \"from\": {\"data\": \"ranges\"},\n            \"properties\": {\n                \"enter\": {\n                    \"x\": {\"scale\": \"x\", \"field\": \"min\"},\n                    \"x2\": {\"scale\": \"x\", \"field\": \"max\"},\n                    \"y\": {\"scale\": \"y\", \"value\": 0},\n                    \"y2\": {\"scale\": \"y\", \"value\": 1},\n                    \"fill\": {\"field\": \"background\"},\n                    \"opacity\": {\"value\": 0.5}\n                }\n            }\n        },\n        {\n            \"type\": \"rect\",\n            \"from\": {\"data\": \"markers\"},\n            \"properties\": {\n                \"enter\": {\n                    \"xc\": {\"scale\": \"x\", \"field\": \"value\"},\n                    \"width\": {\"value\": 2},\n                    \"yc\": {\"scale\": \"y\", \"value\": 0.5},\n                    \"height\": {\"scale\": \"y\", \"value\": 0.75},\n                    \"fill\": {\"scale\": \"color\", \"field\": \"value\"}\n                }\n            }\n        },\n        {\n            \"type\": \"rect\",\n            \"from\": {\"data\": \"values\"},\n            \"properties\": {\n                \"enter\": {\n                    \"x\": {\"scale\": \"x\", \"value\": 0},\n                    \"x2\": {\"scale\": \"x\", \"field\": \"value\"},\n                    \"yc\": {\"scale\": \"y\", \"value\": 0.5},\n                    \"height\": {\"scale\": \"y\", \"value\": 0.5},\n                    \"fill\": {\"scale\": \"color\", \"field\": \"value\"}\n                }\n            }\n        },\n        {\n            \"type\": \"text\",\n            \"properties\": {\n                \"enter\": {\n                    \"x\": {\"value\": -10},\n                    \"y\": {\"scale\": \"y\", \"value\": 0.5},\n                    \"fontSize\": {\"value\": {\"{{\": [\"titleFontSize\", 20]}},\n                    \"text\": {\"value\": {\"{{\": [\"title\", \"\"]}},\n                    \"align\": {\"value\": \"right\"},\n                    \"baseline\": {\"value\": \"middle\"},\n                    \"fill\": {\"value\": \"black\"}\n                }\n            }\n        },\n        {\n            \"type\": \"text\",\n            \"properties\": {\n                \"enter\": {\n                    \"x\": {\"value\": -10},\n                    \"y\": {\"scale\": \"y\", \"value\": 0.5, \"offset\": 15},\n                    \"fontSize\": {\"value\": {\"{{\": [\"subtitleFontSize\", 12]}},\n                    \"text\": {\"value\": {\"{{\": [\"subtitle\", \"\"]}},\n                    \"align\": {\"value\": \"right\"},\n                    \"baseline\": {\"value\": \"middle\"},\n                    \"fill\": {\"value\": \"black\"}\n                }\n            }\n        },\n        {\n            \"type\": \"text\",\n            \"from\": {\"data\": \"values\"},\n            \"properties\": {\n                \"enter\": {\n                    \"x\": {\"scale\": \"x\", \"field\": \"value\"},\n                    \"dx\": {\"field\": \"dx\"},\n                    \"y\": {\"scale\": \"y\", \"value\": 0.5},\n                    \"fontSize\": {\"value\": {\"{{\": [\"labelFontSize\", 16]}},\n                    \"text\": {\"template\": {\n                        \"{{\": [\"display\", \"{{datum.value|number:'.2g'}}\"]\n                    }},\n                    \"align\": {\"field\": \"align\"},\n                    \"baseline\": {\"value\": \"middle\"},\n                    \"fill\": {\"value\": \"white\"}\n                }\n            }\n        }\n    ]\n}\n",
    "module.exports={\n    \"{{\": \"spec\"\n}\n",
    "module.exports={\n    \"width\": { \"{{\": [\"width\", 800] },\n    \"height\": { \"{{\": [\"height\", 500] },\n    \"padding\": { \"{{\": [\"padding\", { \"top\": 10, \"bottom\": 50, \"left\": 50, \"right\": 150 }] },\n    \"predicates\": [\n        {\n            \"name\": \"tooltip\",\n            \"type\": \"==\",\n            \"operands\": [{ \"signal\": \"tooltip._id\" }, { \"arg\": \"id\" }]\n        }\n    ],\n    \"data\": {\n        \"[[\": [\n            { \"{{\": [\"series\", []] },\n            \"d\",\n            {\n                \"name\": { \"{{\": \"d.name\" },\n                \"values\": { \"{{\": \"d.values\" },\n                \"transform\": [\n                    {\n                        \"type\": \"formula\",\n                        \"field\": \"x\",\n                        \"expr\": { \"{{\": [\"d.x\", \"datum.x\"] }\n                    },\n                    {\n                        \"type\": \"formula\",\n                        \"field\": \"y\",\n                        \"expr\": { \"{{\": [\"d.y\", \"datum.y\"] }\n                    }\n                ]\n            }\n        ]\n    },\n    \"signals\": [\n        {\n            \"name\": \"width\", \"init\": { \"{{\": \"width\" }\n        },\n        {\n            \"name\": \"height\", \"init\": { \"{{\": \"height\" }\n        },\n        {\n            \"name\": \"tooltip\",\n            \"init\": {},\n            \"streams\": [\n                { \"type\": \"symbol:mouseover\", \"expr\": \"datum\" },\n                { \"type\": \"symbol:mouseout\", \"expr\": \"{}\" }\n            ]\n        },\n        {\n            \"name\": \"point\",\n            \"init\": 0,\n            \"streams\": [\n                {\n                    \"type\": \"mousedown\",\n                    \"expr\": \"{x: eventX(), y: eventY()}\"\n                }\n            ]\n        },\n        {\n            \"name\": \"delta\",\n            \"init\": 0,\n            \"streams\": [\n                {\n                    \"type\": \"[mousedown, window:mouseup] > window:mousemove\",\n                    \"expr\": \"{x: point.x - eventX(), y: eventY() - point.y}\"\n                }\n            ]\n        },\n        {\n            \"name\": \"xAnchor\",\n            \"init\": 0,\n            \"streams\": [\n                {\n                    \"type\": \"mousemove, wheel\",\n                    \"expr\": \"eventX()\",\n                    \"scale\": { \"name\": \"x\", \"invert\": true }\n                }\n            ]\n        },\n        {\n            \"name\": \"yAnchor\",\n            \"init\": 0,\n            \"streams\": [\n                {\n                    \"type\": \"mousemove, wheel\",\n                    \"expr\": \"eventY()\",\n                    \"scale\": {\"name\": \"y\", \"invert\": true}\n                }\n            ]\n        },\n        {\n            \"name\": \"zoom\",\n            \"init\": 1.0,\n            \"streams\": [\n                {\n                    \"type\": \"wheel\",\n                    \"expr\": \"pow(1.001, event.deltaY)\"\n                }\n            ]\n        },\n        {\n            \"name\": \"xMinAnchor\",\n            \"streams\": [\n                {\n                    \"type\": \"mousedown, mouseup, wheel\",\n                    \"expr\": \"0\",\n                    \"scale\": {\"name\": \"x\", \"invert\": true}\n                }\n            ]\n        },\n        {\n            \"name\": \"xMaxAnchor\",\n            \"streams\": [\n                {\n                    \"type\": \"mousedown, mouseup, wheel\",\n                    \"expr\": \"width\",\n                    \"scale\": {\"name\": \"x\", \"invert\": true}\n                }\n            ]\n        },\n        {\n            \"name\": \"yMinAnchor\",\n            \"streams\": [\n                {\n                    \"type\": \"mousedown, mouseup, wheel\",\n                    \"expr\": \"height\",\n                    \"scale\": {\"name\": \"y\", \"invert\": true}\n                }\n            ]\n        },\n        {\n            \"name\": \"yMaxAnchor\",\n            \"streams\": [\n                {\n                    \"type\": \"mousedown, mouseup, wheel\",\n                    \"expr\": \"0\",\n                    \"scale\": {\"name\": \"y\", \"invert\": true}\n                }\n            ]\n        },\n        {\n            \"name\": \"xMin\",\n            \"init\": { \"{{\": [\"axes.x.range.0\", null] },\n            \"streams\": [\n                {\n                    \"type\": \"delta\",\n                    \"expr\": {\n                        \"??\": [\n                            { \"{{\": [\"axes.x.pan\", true] },\n                            {\n                                \"??\": [\n                                    { \"==\": [{ \"{{\": \"axes.x.type\" }, \"time\"] },\n                                    \"time(xMinAnchor) + (time(xMaxAnchor)-time(xMinAnchor))*delta.x/width\",\n                                    \"xMinAnchor + (xMaxAnchor-xMinAnchor)*delta.x/width\"\n                                ]\n                            },\n                            \"xMinAnchor\"\n                        ]\n                    }\n                },\n                {\n                    \"type\": \"zoom\",\n                    \"expr\": {\n                        \"??\": [\n                            { \"{{\": [\"axes.x.zoom\", true] },\n                            {\n                                \"??\": [\n                                    { \"==\": [{ \"{{\": \"axes.x.type\" }, \"time\"] },\n                                    \"(time(xMinAnchor)-time(xAnchor))*zoom + time(xAnchor)\",\n                                    \"(xMinAnchor-xAnchor)*zoom + xAnchor\"\n                                ]\n                            },\n                            \"xMinAnchor\"\n                        ]\n                    }\n                }\n            ]\n        },\n        {\n            \"name\": \"xMax\",\n            \"init\": { \"{{\": [\"axes.x.range.1\", null] },\n            \"streams\": [\n                {\n                    \"type\": \"delta\",\n                    \"expr\": {\n                        \"??\": [\n                            { \"{{\": [\"axes.x.pan\", true] },\n                            {\n                                \"??\": [\n                                    { \"==\": [{ \"{{\": \"axes.x.type\" }, \"time\"] },\n                                    \"time(xMaxAnchor) + (time(xMaxAnchor)-time(xMinAnchor))*delta.x/width\",\n                                    \"xMaxAnchor + (xMaxAnchor-xMinAnchor)*delta.x/width\"\n                                ]\n                            },\n                            \"xMaxAnchor\"\n                        ]\n                    }\n                },\n                {\n                    \"type\": \"zoom\",\n                    \"expr\": {\n                        \"??\": [\n                            { \"{{\": [\"axes.x.zoom\", true] },\n                            {\n                                \"??\": [\n                                    { \"==\": [{ \"{{\": \"axes.x.type\" }, \"time\"] },\n                                    \"(time(xMaxAnchor)-time(xAnchor))*zoom + time(xAnchor)\",\n                                    \"(xMaxAnchor-xAnchor)*zoom + xAnchor\"\n                                ]\n                            },\n                            \"xMaxAnchor\"\n                        ]\n                    }\n                }\n            ]\n        },\n        {\n            \"name\": \"yMin\",\n            \"init\": { \"{{\": [\"axes.y.range.0\", null] },\n            \"streams\": [\n                {\n                    \"type\": \"delta\",\n                    \"expr\": {\n                        \"??\": [\n                            { \"{{\": [\"axes.y.pan\", true] },\n                            \"yMinAnchor + (yMaxAnchor-yMinAnchor)*delta.y/height\",\n                            \"yMinAnchor\"\n                        ]\n                    }\n                },\n                {\n                    \"type\": \"zoom\",\n                    \"expr\": {\n                        \"??\": [\n                            { \"{{\": [\"axes.y.zoom\", true] },\n                            {\n                                \"??\": [\n                                    { \"==\": [{ \"{{\": \"axes.y.type\" }, \"time\"] },\n                                    \"(yMinAnchor-time(yAnchor))*zoom + time(yAnchor)\",\n                                    \"(yMinAnchor-yAnchor)*zoom + yAnchor\"\n                                ]\n                            },\n                            \"yMinAnchor\"\n                        ]\n                    }\n                }\n            ]\n        },\n        {\n            \"name\": \"yMax\",\n            \"init\": { \"{{\": [\"axes.y.range.1\", null] },\n            \"streams\": [\n                {\n                    \"type\": \"delta\",\n                    \"expr\": {\n                        \"??\": [\n                            { \"{{\": [\"axes.y.pan\", true] },\n                            \"yMaxAnchor + (yMaxAnchor-yMinAnchor)*delta.y/height\",\n                            \"yMaxAnchor\"\n                        ]\n                    }\n                },\n                {\n                    \"type\": \"zoom\",\n                    \"expr\": {\n                        \"??\": [\n                            { \"{{\": [\"axes.y.zoom\", true] },\n                            {\n                                \"??\": [\n                                    { \"==\": [{ \"{{\": \"axes.y.type\" }, \"time\"] },\n                                    \"(yMaxAnchor-time(yAnchor))*zoom + time(yAnchor)\",\n                                    \"(yMaxAnchor-yAnchor)*zoom + yAnchor\"\n                                ]\n                            },\n                            \"yMaxAnchor\"\n                        ]\n                    }\n                }\n            ]\n        }\n    ],\n    \"scales\": [\n        {\n            \"name\": \"x\",\n            \"type\": { \"{{\": [\"axes.x.type\", \"linear\"] },\n            \"range\": \"width\",\n            \"zero\": false,\n            \"domain\": {\n                \"??\": [\n                    { \"{{\": \"series.0\" },\n                    {\n                        \"data\": { \"{{\": \"series.0.name\" },\n                        \"field\": \"x\"\n                    },\n                    [0, 1]\n                ]\n            },\n            \"domainMin\": { \"signal\": \"xMin\" },\n            \"domainMax\": { \"signal\": \"xMax\" }\n        },\n        {\n            \"name\": \"y\",\n            \"type\": { \"{{\": [\"axes.y.type\", \"linear\"] },\n            \"range\": \"height\",\n            \"zero\": false,\n            \"domain\": {\n                \"??\": [\n                    { \"{{\": \"series.0\" },\n                    {\n                        \"data\": { \"{{\": \"series.0.name\" },\n                        \"field\": \"y\"\n                    },\n                    [0, 1]\n                ]\n            },\n            \"domainMin\": { \"signal\": \"yMin\" },\n            \"domainMax\": { \"signal\": \"yMax\" }\n        },\n        {\n            \"name\": \"color\",\n            \"type\": \"ordinal\",\n            \"domain\": {\n                \"[[\": [\n                    { \"{{\": \"series\" },\n                    \"d\",\n                    { \"{{\": \"d.name\" }\n                ]\n            },\n            \"range\": {\n                \"[[\": [\n                    { \"{{\": \"series\" },\n                    \"d\",\n                    { \"{{\": [\"d.color\", \"steelblue\"] }\n                ]\n            }\n        }\n    ],\n    \"axes\": [\n        {\n            \"type\": \"x\",\n            \"scale\": \"x\",\n            \"grid\": true,\n            \"layer\": \"back\",\n            \"title\": { \"{{\": [\"axes.x.title\", \"\"] }\n        },\n        {\n            \"type\": \"y\",\n            \"scale\": \"y\",\n            \"grid\": true,\n            \"layer\": \"back\",\n            \"title\": { \"{{\": [\"axes.y.title\", \"\"] }\n        }\n    ],\n    \"legends\": [\n        {\n            \"fill\": \"color\",\n            \"orient\": \"right\",\n            \"properties\": {\n                \"symbols\": {\n                    \"stroke\": { \"value\": \"transparent\" }\n                }\n            }\n        }\n    ],\n    \"marks\": [\n        {\n            \"type\": \"group\",\n            \"properties\": {\n                \"enter\": {\n                    \"x\": { \"value\": 0 },\n                    \"width\": { \"field\": {\"group\": \"width\" } },\n                    \"y\": { \"value\": 0 },\n                    \"height\": { \"field\": { \"group\": \"height\" } },\n                    \"clip\": { \"value\": true }\n                }\n            },\n            \"marks\": [\n                {\n                    \"type\": \"group\",\n                    \"marks\": {\n                        \"[[\": [\n                            { \"{{\": \"series\" },\n                            \"d\",\n                            {\n                                \"??\": [\n                                    { \"{{\": [\"d.line\", false] },\n                                    {\n                                        \"type\": \"line\",\n                                        \"from\": { \"data\": { \"{{\": \"d.name\" } },\n                                        \"properties\": {\n                                            \"update\": {\n                                                \"x\": { \"scale\": \"x\", \"field\": \"x\" },\n                                                \"y\": { \"scale\": \"y\", \"field\": \"y\" },\n                                                \"stroke\": { \"scale\": \"color\", \"value\": { \"{{\" : \"d.name\" } },\n                                                \"strokeWidth\": { \"{{\": [\"d.lineWidth\", 1] }\n                                            }\n                                        }\n                                    },\n                                    null\n                                ]\n                            }\n                        ]\n                    }\n                },\n                {\n                    \"type\": \"group\",\n                    \"marks\": {\n                        \"[[\": [\n                            { \"{{\": \"series\" },\n                            \"d\",\n                            {\n                                \"??\": [\n                                    { \"{{\": [\"d.point\", true] },\n                                    {\n                                        \"type\": \"symbol\",\n                                        \"from\": { \"data\": { \"{{\": \"d.name\" } },\n                                        \"properties\": {\n                                            \"update\": {\n                                                \"x\": { \"scale\": \"x\", \"field\": \"x\" },\n                                                \"y\": { \"scale\": \"y\", \"field\": \"y\" },\n                                                \"fill\": { \"scale\": \"color\", \"value\": { \"{{\" : \"d.name\" } },\n                                                \"stroke\": { \"value\": \"#444\" },\n                                                \"shape\": { \"value\": { \"{{\": [\"d.shape\", \"circle\"] } },\n                                                \"strokeWidth\": { \"value\": { \"{{\": [\"d.strokeWidth\", 0.25] } },\n                                                \"size\": { \"value\": { \"{{\": [\"d.pointSize\", 20] } }\n                                            },\n                                            \"hover\": {\n                                                \"size\": { \"value\": 80 }\n                                            }\n                                        }\n                                    },\n                                    null\n                                ]\n                            }\n                        ]\n                    }\n                },\n                {\n                    \"type\": \"text\",\n                    \"properties\": {\n                        \"enter\": {\n                            \"align\": { \"value\": \"center\" },\n                            \"fill\": { \"value\": \"#333\" }\n                        },\n                        \"update\": {\n                            \"x\": { \"scale\": \"x\", \"signal\": \"tooltip.x\" },\n                            \"y\": { \"scale\": \"y\", \"signal\": \"tooltip.y\", \"offset\": -5 },\n                            \"text\": { \"template\": \"({{tooltip.x|number:'.4g'}}, {{tooltip.y|number:'.4g'}})\" },\n                            \"fillOpacity\": {\n                                \"rule\": [\n                                    {\n                                        \"predicate\": {\n                                            \"name\": \"tooltip\",\n                                            \"id\": { \"value\": null }\n                                        },\n                                        \"value\": 0\n                                    },\n                                    { \"value\": 1 }\n                                ]\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}\n"
  ]
}